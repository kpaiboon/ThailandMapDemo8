@{
    ViewData["Title"] = "Map Application";
}

<h2>Thailand Map Application</h2>

<div class="map-switcher">
    <button id="longdoBtn" class="active-map" onclick="switchToLongdo()">Longdo Map</button>
    <button id="osmBtn" onclick="switchToOSM()">OpenStreetMap</button>
</div>

<div class="controls">
    <select id="routeSelect">
        <option value="">Select Route</option>
        <option value="bangkok-nakhonsawan-chiangmai">Bangkok - นครสวรรค์ - เชียงใหม่</option>
        <option value="bangkok-chonburi-chanthaburi">Bangkok - ชลบุรี - จันทบุรี</option>
        <option value="bangkok-prachuap-surathani">Bangkok - ประจวบ - สุราษฎร์ธานี</option>
        <option value="bangkok-nakhonsrithammarat">กรุงเทพฯ - หาดใหญ่ (แวะพัก)</option>
    </select>
    <button onclick="addRoute()">Add Route</button>
    <button onclick="clearMap()">Clear</button>
</div>

<div id="longdoMapContainer" style="height:500px; width:100%;"></div>
<div id="leafletMapContainer" style="height:500px; width:100%; display:none;"></div>

@section Scripts {
<script src="https://api.longdo.com/map/?key=@ViewBag.LongdoApiKey"></script>
<script>
    let currentMap = 'longdo';
    let longdoMap;
    let leafletMap;
    let longdoMarkers = [];
    let longdoPolyline = null;
    let leafletMarkers = [];
    let leafletPolyline = null;

    // Route coordinates
    const routes = {
        'bangkok-nakhonsawan-chiangmai': [
            { lat: 13.7563, lng: 100.5018, name: 'Bangkok' },
            { lat: 15.7057, lng: 100.1088, name: 'นครสวรรค์' },
            { lat: 18.7883, lng: 98.9853, name: 'เชียงใหม่' }
        ],
        'bangkok-chonburi-chanthaburi': [
            { lat: 13.7563, lng: 100.5018, name: 'Bangkok' },
            { lat: 13.3611, lng: 100.9847, name: 'ชลบุรี' },
            { lat: 12.6103, lng: 102.1076, name: 'จันทบุรี' }
        ],
        'bangkok-prachuap-surathani': [
            { lat: 13.7563, lng: 100.5018, name: 'Bangkok' },
            { lat: 11.8130, lng: 99.7970, name: 'ประจวบคีรีขันธ์' },
            { lat: 9.1342, lng: 99.3215, name: 'สุราษฎร์ธานี' }
        ],
        'bangkok-nakhonsrithammarat': [
            { lat: 13.7563, lng: 100.5018, name: 'กรุงเทพฯ' },
            { lat: 13.1466, lng: 99.9392, name: 'ปั๊มน้ำมัน ปตท. ลุงเท่ง เพชรบุรี' },
            { lat: 10.4931, lng: 99.1807, name: 'ห้องอาหารคุณสาหร่าย ชุมพร' },
            { lat: 8.1638, lng: 99.7117, name: 'ร้านอาหารวังกุ้ง ทุ่งสง' },
            { lat: 7.0083, lng: 100.4747, name: 'หาดใหญ่' } // เปลี่ยนจาก นครศรีธรรมราช เป็น หาดใหญ่
        ]
    };

    function initMaps() {
        const bangkok = { lat: 13.7563, lng: 100.5018, name: 'Bangkok' };

        longdoMap = new longdo.Map({
            placeholder: document.getElementById('longdoMapContainer'),
            zoom: 10,
            center: { lat: bangkok.lat, lon: bangkok.lng }
        });

        // Add Bangkok marker to Longdo
        const marker = new longdo.Marker(
            { lat: bangkok.lat, lon: bangkok.lng },
            { title: bangkok.name }
        );
        longdoMap.Overlays.add(marker);
        longdoMarkers.push(marker);

        leafletMap = L.map('leafletMapContainer', {
            center: [bangkok.lat, bangkok.lng],
            zoom: 10
        });
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(leafletMap);

        // Add Bangkok marker to Leaflet
        const leafletMarker = L.marker([bangkok.lat, bangkok.lng])
            .bindPopup(bangkok.name)
            .addTo(leafletMap);
        leafletMarkers.push(leafletMarker);

        leafletMap.getContainer().style.display = 'none';
    }

    function switchToLongdo() {
        currentMap = 'longdo';
        document.getElementById('longdoBtn').classList.add('active-map');
        document.getElementById('osmBtn').classList.remove('active-map');
        document.getElementById('longdoMapContainer').style.display = 'block';
        document.getElementById('leafletMapContainer').style.display = 'none';
        setTimeout(() => { longdoMap.resize(); }, 100);
    }

    function switchToOSM() {
        currentMap = 'osm';
        document.getElementById('osmBtn').classList.add('active-map');
        document.getElementById('longdoBtn').classList.remove('active-map');
        document.getElementById('longdoMapContainer').style.display = 'none';
        document.getElementById('leafletMapContainer').style.display = 'block';
        setTimeout(() => { leafletMap.invalidateSize(); }, 100);
    }

    async function getLongdoRouteAPI(points) {
        // ใช้จุดแรกและสุดท้ายเป็น from/to, จุดพักเป็น waypoint
        const from = `${points[0].lat},${points[0].lng}`;
        const to = `${points[points.length-1].lat},${points[points.length-1].lng}`;
        const waypoints = points.slice(1, -1).map(p => `${p.lat},${p.lng}`).join('|');
        const apiKey = '@ViewBag.LongdoApiKey';

        let url = `https://api.longdo.com/RouteService/json?key=${apiKey}&from=${from}&to=${to}`;
        if (waypoints) url += `&via=${waypoints}`;

        const res = await fetch(url);
        const data = await res.json();

        // data.route.geometry เป็น array [lng, lat]
        return data.route.geometry.map(coord => ({ lat: coord[1], lon: coord[0] }));
    }

    async function addLongdoRoute(points) {
        longdoMarkers.forEach(marker => longdoMap.Overlays.remove(marker));
        if (longdoPolyline) longdoMap.Overlays.remove(longdoPolyline);
        longdoMarkers = [];
        longdoPolyline = null;

        // เพิ่ม marker จุดพัก
        points.forEach(point => {
            const marker = new longdo.Marker(
                { lat: point.lat, lon: point.lng },
                { title: point.name }
            );
            longdoMap.Overlays.add(marker);
            longdoMarkers.push(marker);
        });

        // ใช้ฟีเจอร์ Route ของ Longdo Map API
        longdoMap.Route.clear();
        points.forEach(point => {
            longdoMap.Route.add({ lat: point.lat, lon: point.lng });
        });
        longdoMap.Route.search();

        // ถ้าต้องการแสดงรายละเอียดเส้นทาง
        // longdoMap.Route.placeholder(document.getElementById('resultDiv'));
    }

    // ปรับ addRoute ให้รองรับ async
    function addRoute() {
        const routeKey = document.getElementById('routeSelect').value;
        if (!routeKey) {
            alert('Please select a route');
            return;
        }

        clearMap();
        const routePoints = routes[routeKey];

        if (currentMap === 'longdo') {
            addLongdoRoute(routePoints); // ไม่ต้องใช้ await เพราะ event handler ไม่รองรับ async โดยตรง
        } else {
            addLeafletRoute(routePoints);
        }
    }

    function addLeafletRoute(points) {
        leafletMarkers.forEach(marker => leafletMap.removeLayer(marker));
        if (leafletPolyline) leafletMap.removeLayer(leafletPolyline);
        leafletMarkers = [];
        leafletPolyline = null;

        points.forEach(point => {
            const marker = L.marker([point.lat, point.lng])
                .bindPopup(point.name)
                .addTo(leafletMap);
            leafletMarkers.push(marker);
        });

        const coordinates = points.map(p => [p.lat, p.lng]);
        leafletPolyline = L.polyline(coordinates, { color: 'red', weight: 3 })
            .addTo(leafletMap);

        if (points.length > 1) {
            leafletMap.fitBounds(coordinates);
        }
    }

    function clearMap() {
        if (currentMap === 'longdo') {
            longdoMarkers.forEach(marker => longdoMap.Overlays.remove(marker));
            if (longdoPolyline) longdoMap.Overlays.remove(longdoPolyline);
            longdoMarkers = [];
            longdoPolyline = null;
            longdoMap.location({ lat: 13.7563, lon: 100.5018 }, true);
            longdoMap.zoom(10, true);
        } else {
            leafletMarkers.forEach(marker => leafletMap.removeLayer(marker));
            if (leafletPolyline) leafletMap.removeLayer(leafletPolyline);
            leafletMarkers = [];
            leafletPolyline = null;
            leafletMap.setView([13.7563, 100.5018], 10);
        }
    }

    window.onload = function() {
        if (window.longdo && window.longdo.Map) {
            initMaps();
        } else {
            let checkLongdo = setInterval(function() {
                if (window.longdo && window.longdo.Map) {
                    clearInterval(checkLongdo);
                    initMaps();
                }
            }, 100);
        }
        document.getElementById('routeSelect').addEventListener('change', addRoute);
    };
</script>
}